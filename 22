import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class ChatApp {
    
    private static final int PORT = 12345;
    private static Map<String, PrintWriter> clients = new ConcurrentHashMap<>();
    
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Запустите сервер или клиент.");
            return;
        }

        if (args[0].equals("server")) {
            startServer();
        } else if (args[0].equals("client")) {
            startClient();
        } else {
            System.out.println("Неверный аргумент. Используйте 'server' или 'client'.");
        }
    }

    private static void startServer() {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Сервер запущен на порту " + PORT);
            while (true) {
                new ClientHandler(serverSocket.accept()).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void startClient() {
        try (Socket socket = new Socket("localhost", PORT);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in))) {

            String clientName = in.readLine();
            System.out.println(clientName);
            String name = userInput.readLine();
            out.println(name);

            Thread readThread = new Thread(() -> {
                try {
                    String message;
                    while ((message = in.readLine()) != null) {
                        System.out.println(message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
            readThread.start();

            String message;
            while (true) {
                message = userInput.readLine();
                out.println(message);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;
        private String clientName;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                out.println("Введите ваше имя:");
                clientName = in.readLine();
                clients.put(clientName, out);
                System.out.println(clientName + " подключился.");

                String message;
                while ((message = in.readLine()) != null) {
                    if (message.startsWith("/w")) {
                        sendPrivateMessage(message);
                    } else {
                        broadcastMessage(clientName + ": " + message);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    clients.remove(clientName);
                    socket.close();
                    System.out.println(clientName + " отключился.");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        private void sendPrivateMessage(String message) {
            String[] parts = message.split(" ", 3);
            if (parts.length < 3) {
                out.println("Неверный формат команды. Используйте /w <имя> <сообщение>");
                return;
            }
            String recipientName = parts[1];
            String privateMessage = parts[2];

            PrintWriter recipientOut = clients.get(recipientName);
            if (recipientOut != null) {
                recipientOut.println("Личное сообщение от " + clientName + ": " + privateMessage);
            } else {
                out.println("Пользователь с ником " + recipientName + " не найден.");
            }
        }

        private void broadcastMessage(String message) {
            for (PrintWriter clientOut : clients.values()) {
                clientOut.println(message);
            }
        }
    }
}
